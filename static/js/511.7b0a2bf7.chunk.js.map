{"version":3,"file":"static/js/511.7b0a2bf7.chunk.js","mappings":"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","sources":["pages/CalculatePage.tsx","hooks/useFinancialFreedom.tsx"],"sourcesContent":["import { Button, Divider, Form, Input, InputNumber, Select, Space } from \"antd\";\nimport { useFinancialFreedom } from \"../hooks/useFinancialFreedom\";\n\ntype Props = {\n  timestamp: Date;\n};\nexport const loader = async (): Promise<Props> => {\n  await new Promise((r) => setTimeout(r, 100));\n  return {\n    timestamp: new Date(),\n  };\n};\n\nenum IncomeType {\n  TotalIncome = \"total_income\",\n  Accumulate = \"accumulate\",\n}\nconst IncomeTypeValue: Record<IncomeType, string> = {\n  [IncomeType.Accumulate]: \"Tích luỹ thêm\",\n  [IncomeType.TotalIncome]: \"Tổng thu nhập\",\n};\n\nenum CalculateType {\n  Income = \"income\",\n  Cycle = \"cycle\",\n}\nconst CalculateTypeValue: Record<CalculateType, string> = {\n  [CalculateType.Income]: \"Theo thu nhập\",\n  [CalculateType.Cycle]: \"Theo chu kì\",\n};\n\nconst layout = {\n  labelCol: { span: 8 },\n  wrapperCol: { span: 16 },\n};\n\nconst tailLayout = {\n  wrapperCol: { offset: 8, span: 16 },\n};\ntype FormProps = {\n  initValue: number;\n  expectedInterestRate: number;\n  inflationaryRate: number;\n  minimumSpending: number;\n  incomeType: IncomeType;\n  incomeValue: number;\n  calculateType: CalculateType;\n\n  incomeTotal: number; // calculate\n  cycle: number; // calculate\n};\nexport const Component = () => {\n  const [form] = Form.useForm<FormProps>();\n\n  const { calculateByCycle, calculateByIncome } = useFinancialFreedom();\n\n  const handleCalculateByIncome = () => {\n    const { incomeType, incomeValue, minimumSpending } = form.getFieldsValue();\n    let incomeTotal = 0;\n    switch (incomeType) {\n      case IncomeType.TotalIncome:\n        incomeTotal = Number(incomeValue);\n        break;\n      case IncomeType.Accumulate:\n        incomeTotal = Number(minimumSpending) + Number(incomeValue);\n        break;\n    }\n\n    const { cycle } = calculateByIncome({\n      ...form.getFieldsValue(),\n      incomeTotal,\n    });\n\n    if (cycle) {\n      form.setFieldsValue({\n        cycle,\n        incomeTotal,\n      });\n    }\n  };\n\n  const handleCalculateByCycle = () => {\n    const { cycle } = form.getFieldsValue();\n    const { incomeTotal } = calculateByCycle({\n      ...form.getFieldsValue(),\n      cycle,\n    });\n    if (incomeTotal) {\n      form.setFieldsValue({ incomeTotal });\n    }\n  };\n\n  const calculate = () => {\n    const { calculateType } = form.getFieldsValue();\n    switch (calculateType) {\n      case CalculateType.Income:\n        handleCalculateByIncome();\n        return;\n      case CalculateType.Cycle:\n        handleCalculateByCycle();\n        return;\n    }\n  };\n\n  const onFinish = (values: FormProps) => {\n    console.log(values);\n  };\n\n  const onReset = () => {\n    form.resetFields();\n  };\n\n  return (\n    <div>\n      <Form\n        {...layout}\n        form={form}\n        name=\"control-hooks\"\n        onFinish={onFinish}\n        className=\"max-w-lg\"\n      >\n        <Form.Item\n          name=\"initValue\"\n          label=\"Tài sản hiện có\"\n          hasFeedback\n          help=\"Số tài sản bạn đã có\"\n        >\n          <InputNumber\n            className=\"w-full\"\n            formatter={(value) =>\n              `${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\n            }\n            parser={(value) => value!.replace(/\\$\\s?|(,*)/g, \"\")}\n            onChange={calculate}\n            suffix=\"đ\"\n          />\n        </Form.Item>\n        <Form.Item\n          name=\"expectedInterestRate\"\n          label=\"Lãi suất kì vọng (%)\"\n          rules={[{ required: true, min: 0, max: 100 }]}\n          hasFeedback\n          help=\"Lãi suất hàng năm mà bạn mong muốn\"\n          initialValue={8}\n        >\n          <Input\n            suffix=\"%\"\n            type=\"number\"\n            min={0}\n            max={100}\n            onChange={calculate}\n          />\n        </Form.Item>\n        <Form.Item\n          name=\"inflationaryRate\"\n          label=\"Lạm phát mỗi năm (%)\"\n          rules={[{ required: true, min: 0, max: 100 }]}\n          hasFeedback\n          help=\"Lạm phát mỗi năm\"\n          initialValue={3}\n        >\n          <Input\n            suffix=\"%\"\n            type=\"number\"\n            min={0}\n            max={100}\n            onChange={calculate}\n          />\n        </Form.Item>\n        <Form.Item\n          name=\"minimumSpending\"\n          label=\"Chi tiêu tối thiểu\"\n          rules={[{ required: true }]}\n          hasFeedback\n          help=\"Chi phí tối thiểu mỗi tháng của bạn\"\n          initialValue={12000000}\n        >\n          <InputNumber\n            className=\"w-full\"\n            formatter={(value) =>\n              `${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\n            }\n            parser={(value) => value!.replace(/\\$\\s?|(,*)/g, \"\")}\n            onChange={calculate}\n            suffix=\"đ/tháng\"\n          />\n        </Form.Item>\n\n        <Divider />\n\n        <Form.Item\n          name=\"calculateType\"\n          label=\"Loại tính\"\n          initialValue={CalculateType.Income}\n          rules={[{ required: true }]}\n        >\n          <Select placeholder=\"Chọn loại tính mà bạn muốn\" allowClear>\n            {Object.entries(CalculateType).map(([key, value]) => (\n              <Select.Option key={key} value={value}>\n                {CalculateTypeValue[value]}\n              </Select.Option>\n            ))}\n          </Select>\n        </Form.Item>\n\n        <Form.Item\n          noStyle\n          shouldUpdate={(prevValues, currentValues) =>\n            prevValues.calculateType !== currentValues.calculateType\n          }\n        >\n          {({ getFieldValue }) => (\n            <Form.Item\n              name=\"incomeValue\"\n              label=\"Loại thu nhập\"\n              help=\"Chọn loại thu nhập mà bạn muốn\"\n              rules={[{ required: true }]}\n              hasFeedback\n              hidden={getFieldValue(\"calculateType\") !== CalculateType.Income}\n            >\n              <InputNumber\n                className=\"w-full\"\n                addonBefore={\n                  <Form.Item\n                    name=\"incomeType\"\n                    noStyle\n                    initialValue={IncomeType.TotalIncome}\n                  >\n                    <Select onChange={handleCalculateByIncome}>\n                      {Object.entries(IncomeType).map(([key, value]) => (\n                        <Select.Option key={key} value={value}>\n                          {IncomeTypeValue[value]}\n                        </Select.Option>\n                      ))}\n                    </Select>\n                  </Form.Item>\n                }\n                formatter={(value) =>\n                  `${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\n                }\n                parser={(value) => value!.replace(/\\$\\s?|(,*)/g, \"\")}\n                onChange={handleCalculateByIncome}\n                suffix=\"đ/tháng\"\n              />\n            </Form.Item>\n          )}\n        </Form.Item>\n\n        <Form.Item\n          noStyle\n          shouldUpdate={(prevValues, currentValues) =>\n            prevValues.calculateType !== currentValues.calculateType ||\n            prevValues.cycle !== currentValues.cycle\n          }\n        >\n          {({ getFieldValue }) => (\n            <Form.Item\n              name=\"cycle\"\n              label=\"Thời gian cần\"\n              rules={[{ required: true, min: 0 }]}\n              hasFeedback\n            >\n              <Input\n                suffix=\"tháng\"\n                disabled={\n                  getFieldValue(\"calculateType\") !== CalculateType.Cycle\n                }\n                onChange={handleCalculateByCycle}\n              />\n            </Form.Item>\n          )}\n        </Form.Item>\n\n        <Form.Item\n          noStyle\n          shouldUpdate={(prevValues, currentValues) =>\n            prevValues.calculateType !== currentValues.calculateType ||\n            prevValues.incomeTotal !== currentValues.incomeTotal ||\n            prevValues.minimumSpending !== currentValues.minimumSpending\n          }\n        >\n          {({ getFieldValue }) => {\n            return (\n              <div\n                hidden={getFieldValue(\"calculateType\") !== CalculateType.Cycle}\n              >\n                <Form.Item name=\"incomeTotal\" label=\"Tổng thu nhập \">\n                  <InputNumber\n                    className=\"w-full\"\n                    disabled\n                    formatter={(value) =>\n                      `${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\n                    }\n                    suffix=\"đ/tháng\"\n                  />\n                </Form.Item>\n                <Form.Item label=\"Tổng tích luỹ \">\n                  <InputNumber\n                    className=\"w-full\"\n                    disabled\n                    formatter={(value) =>\n                      `${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\n                    }\n                    value={\n                      Number(getFieldValue(\"incomeTotal\")) -\n                        Number(getFieldValue(\"minimumSpending\")) || \"\"\n                    }\n                    suffix=\"đ/tháng\"\n                  />\n                </Form.Item>\n              </div>\n            );\n          }}\n        </Form.Item>\n\n        <Form.Item {...tailLayout}>\n          <Space>\n            <Button htmlType=\"button\" onClick={onReset}>\n              Reset\n            </Button>\n          </Space>\n        </Form.Item>\n      </Form>\n    </div>\n  );\n};\n\nComponent.displayName = \"CalculatePage\";\n","type MinimumParam = {\n  initValue?: number;\n  expectedInterestRate: number;\n  inflationaryRate: number;\n  minimumSpending: number;\n};\nexport const useFinancialFreedom = () => {\n  const calculateByCycle = ({\n    cycle,\n    expectedInterestRate,\n    inflationaryRate,\n    initValue = 0,\n    minimumSpending,\n  }: MinimumParam & { cycle: number }) => {\n    const incomeTotal = Math.ceil(\n      ((12 * minimumSpending) /\n        (expectedInterestRate / 100 - inflationaryRate / 100) -\n        initValue) /\n        cycle\n    );\n    console.log(\n      \"===calculateByCycle\",\n      {\n        cycle,\n        expectedInterestRate,\n        inflationaryRate,\n        initValue,\n        minimumSpending,\n      },\n      { incomeTotal }\n    );\n    return {\n      incomeTotal,\n    };\n  };\n\n  const calculateByIncome = ({\n    incomeTotal,\n    expectedInterestRate,\n    inflationaryRate,\n    initValue = 0,\n    minimumSpending,\n  }: MinimumParam & { incomeTotal: number }) => {\n    const cycle = Math.ceil(\n      ((12 * minimumSpending) /\n        (expectedInterestRate / 100 - inflationaryRate / 100) -\n        initValue) /\n        incomeTotal\n    );\n\n    console.log(\n      \"===calculateByIncome\",\n      {\n        incomeTotal,\n        expectedInterestRate,\n        inflationaryRate,\n        initValue,\n        minimumSpending,\n      },\n      { cycle }\n    );\n    return {\n      cycle,\n    };\n  };\n\n  return {\n    calculateByCycle,\n    calculateByIncome,\n  };\n};\n\n// finallyAmount * (expectedInterestRate - inflationaryRate) = 12 * minimumSpending => finallyAmount = 12 * minimumSpending / (expectedInterestRate - inflationaryRate)\n\n// cycle = (finallyAmount - initValue) / incomeTotal\n//   = (12 * minimumSpending / (expectedInterestRate - inflationaryRate) - initValue) / incomeTotal\n\n// incomeTotal = (finallyAmount - initValue) / cycle\n"],"names":["loader","async","Promise","r","setTimeout","timestamp","Date","IncomeType","IncomeTypeValue","Accumulate","TotalIncome","CalculateType","CalculateTypeValue","Income","Cycle","layout","labelCol","span","wrapperCol","tailLayout","offset","Component","form","Form","useForm","calculateByCycle","calculateByIncome","_ref","cycle","expectedInterestRate","inflationaryRate","initValue","minimumSpending","incomeTotal","Math","ceil","console","log","_ref2","handleCalculateByIncome","incomeType","incomeValue","getFieldsValue","Number","setFieldsValue","handleCalculateByCycle","calculate","calculateType","_jsx","children","_jsxs","name","onFinish","values","className","Item","label","hasFeedback","help","InputNumber","formatter","value","concat","replace","parser","onChange","suffix","rules","required","min","max","initialValue","Input","type","Divider","Select","placeholder","allowClear","Object","entries","map","key","Option","noStyle","shouldUpdate","prevValues","currentValues","getFieldValue","hidden","addonBefore","_ref3","_ref4","disabled","_ref5","Space","Button","htmlType","onClick","onReset","resetFields","displayName"],"sourceRoot":""}